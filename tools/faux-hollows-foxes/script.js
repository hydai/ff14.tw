class FauxHollowsFoxes {
    static CONSTANTS = {
        BOARD_SIZE: 6,
        MAX_CLICKS: 11,
        SCORES: {
            SWORD: 100,
            CHEST: 60,
            FOX: 20
        },
        SHAPES: {
            SWORD: { width: 2, height: 3 }, // Can be rotated to 3x2
            CHEST: { width: 2, height: 2 },
            FOX: { width: 1, height: 1 }
        }
    };

    static BOARD_DATA = [
        [[4,0,0,4,3,3],[0,0,0,1,3,3],[0,1,0,0,1,0],[0,0,0,0,0,4],[0,2,2,2,1,4],[1,2,2,2,0,0]],
        [[1,0,0,0,0,4],[2,2,0,1,0,0],[2,2,0,0,0,0],[2,2,0,0,1,4],[0,1,0,1,3,3],[0,4,4,0,3,3]],
        [[0,0,2,2,2,1],[4,1,2,2,2,0],[4,0,0,0,0,0],[0,1,0,0,1,0],[3,3,1,0,0,0],[3,3,4,0,0,4]],
        [[3,3,0,4,4,0],[3,3,1,0,1,0],[4,1,0,0,2,2],[0,0,0,0,2,2],[0,0,1,0,2,2],[4,0,0,0,0,1]],
        [[4,0,0,4,0,0],[0,0,0,1,0,0],[0,1,3,3,1,0],[0,0,3,3,0,4],[0,2,2,2,1,4],[1,2,2,2,0,0]],
        [[1,0,0,0,0,4],[2,2,0,1,0,0],[2,2,3,3,0,0],[2,2,3,3,1,4],[0,1,0,1,0,0],[0,4,4,0,0,0]],
        [[0,0,2,2,2,1],[4,1,2,2,2,0],[4,0,3,3,0,0],[0,1,3,3,1,0],[0,0,1,0,0,0],[0,0,4,0,0,4]],
        [[0,0,0,4,4,0],[0,0,1,0,1,0],[4,1,3,3,2,2],[0,0,3,3,2,2],[0,0,1,0,2,2],[4,0,0,0,0,1]],
        [[0,0,0,0,3,3],[0,0,0,1,3,3],[0,1,0,0,1,0],[4,2,2,2,4,0],[4,2,2,2,1,0],[1,0,0,4,0,0]],
        [[1,4,4,0,0,0],[0,2,2,1,0,0],[0,2,2,0,0,0],[4,2,2,0,1,0],[0,1,4,1,3,3],[0,0,0,0,3,3]],
        [[0,0,4,0,0,1],[0,1,2,2,2,4],[0,4,2,2,2,4],[0,1,0,0,1,0],[3,3,1,0,0,0],[3,3,0,0,0,0]],
        [[3,3,0,0,0,0],[3,3,1,4,1,0],[0,1,0,2,2,4],[0,0,0,2,2,0],[0,0,1,2,2,0],[0,0,0,4,4,1]],
        [[0,3,3,0,0,0],[0,3,3,1,0,0],[0,1,0,0,1,0],[4,2,2,2,4,0],[4,2,2,2,1,0],[1,0,0,4,0,0]],
        [[1,4,4,0,0,0],[0,2,2,1,3,3],[0,2,2,0,3,3],[4,2,2,0,1,0],[0,1,4,1,0,0],[0,0,0,0,0,0]],
        [[0,0,4,0,0,1],[0,1,2,2,2,4],[0,4,2,2,2,4],[0,1,0,0,1,0],[0,0,1,3,3,0],[0,0,0,3,3,0]],
        [[0,0,0,0,0,0],[0,0,1,4,1,0],[0,1,0,2,2,4],[3,3,0,2,2,0],[3,3,1,2,2,0],[0,0,0,4,4,1]],
        [[0,0,0,0,3,3],[0,0,0,1,3,3],[0,1,4,0,1,0],[2,2,2,4,0,0],[2,2,2,4,1,0],[1,0,0,0,0,4]],
        [[1,2,2,0,0,0],[0,2,2,1,0,0],[0,2,2,4,0,0],[0,4,4,0,1,0],[0,1,0,1,3,3],[4,0,0,0,3,3]],
        [[4,0,0,0,0,1],[0,1,4,2,2,2],[0,0,4,2,2,2],[0,1,0,4,1,0],[3,3,1,0,0,0],[3,3,0,0,0,0]],
        [[3,3,0,0,0,4],[3,3,1,0,1,0],[0,1,0,4,4,0],[0,0,4,2,2,0],[0,0,1,2,2,0],[0,0,0,2,2,1]],
        [[0,3,3,0,0,0],[0,3,3,1,0,0],[0,1,4,0,1,0],[2,2,2,4,0,0],[2,2,2,4,1,0],[1,0,0,0,0,4]],
        [[1,2,2,0,0,0],[0,2,2,1,3,3],[0,2,2,4,3,3],[0,4,4,0,1,0],[0,1,0,1,0,0],[4,0,0,0,0,0]],
        [[4,0,0,0,0,1],[0,1,4,2,2,2],[0,0,4,2,2,2],[0,1,0,4,1,0],[0,0,1,3,3,0],[0,0,0,3,3,0]],
        [[0,0,0,0,0,4],[0,0,1,0,1,0],[0,1,0,4,4,0],[3,3,4,2,2,0],[3,3,1,2,2,0],[0,0,0,2,2,1]],
        [[4,3,3,4,0,0],[0,3,3,1,0,0],[0,1,0,0,1,0],[0,0,2,2,0,4],[0,0,2,2,1,4],[1,0,2,2,0,0]],
        [[1,0,0,0,0,4],[0,0,0,1,3,3],[2,2,2,0,3,3],[2,2,2,0,1,4],[0,1,0,1,0,0],[0,4,4,0,0,0]],
        [[0,0,2,2,0,1],[4,1,2,2,0,0],[4,0,2,2,0,0],[0,1,0,0,1,0],[0,0,1,3,3,0],[0,0,4,3,3,4]],
        [[0,0,0,4,4,0],[0,0,1,0,1,0],[4,1,0,2,2,2],[3,3,0,2,2,2],[3,3,1,0,0,0],[4,0,0,0,0,1]],
        [[4,0,0,4,0,0],[0,0,0,1,0,0],[0,1,0,0,1,0],[3,3,2,2,0,4],[3,3,2,2,1,4],[1,0,2,2,0,0]],
        [[1,3,3,0,0,4],[0,3,3,1,0,0],[2,2,2,0,0,0],[2,2,2,0,1,4],[0,1,0,1,0,0],[0,4,4,0,0,0]],
        [[0,0,2,2,0,1],[4,1,2,2,3,3],[4,0,2,2,3,3],[0,1,0,0,1,0],[0,0,1,0,0,0],[0,0,4,0,0,4]],
        [[0,0,0,4,4,0],[0,0,1,0,1,0],[4,1,0,2,2,2],[0,0,0,2,2,2],[0,0,1,3,3,0],[4,0,0,3,3,1]],
        [[0,0,0,0,3,3],[0,0,0,1,3,3],[0,1,4,0,1,0],[0,2,2,4,0,0],[0,2,2,4,1,0],[1,2,2,0,0,4]],
        [[1,0,0,0,0,0],[2,2,2,1,0,0],[2,2,2,4,0,0],[0,4,4,0,1,0],[0,1,0,1,3,3],[4,0,0,0,3,3]],
        [[4,0,0,2,2,1],[0,1,4,2,2,0],[0,0,4,2,2,0],[0,1,0,4,1,0],[3,3,1,0,0,0],[3,3,0,0,0,0]],
        [[3,3,0,0,0,4],[3,3,1,0,1,0],[0,1,0,4,4,0],[0,0,4,2,2,2],[0,0,1,2,2,2],[0,0,0,0,0,1]],
        [[3,3,0,0,0,0],[3,3,0,1,0,0],[0,1,4,0,1,0],[0,2,2,4,0,0],[0,2,2,4,1,0],[1,2,2,0,0,4]],
        [[1,0,0,0,3,3],[2,2,2,1,3,3],[2,2,2,4,0,0],[0,4,4,0,1,0],[0,1,0,1,0,0],[4,0,0,0,0,0]],
        [[4,0,0,2,2,1],[0,1,4,2,2,0],[0,0,4,2,2,0],[0,1,0,4,1,0],[0,0,1,0,3,3],[0,0,0,0,3,3]],
        [[0,0,0,0,0,4],[0,0,1,0,1,0],[0,1,0,4,4,0],[0,0,4,2,2,2],[3,3,1,2,2,2],[3,3,0,0,0,1]],
        [[0,0,0,0,3,3],[0,0,0,1,3,3],[4,1,2,2,1,4],[0,0,2,2,0,0],[0,0,2,2,1,0],[1,4,0,0,4,0]],
        [[1,0,0,4,0,0],[4,0,0,1,0,0],[0,2,2,2,0,0],[0,2,2,2,1,0],[4,1,0,1,3,3],[0,0,0,4,3,3]],
        [[0,4,0,0,4,1],[0,1,2,2,0,0],[0,0,2,2,0,0],[4,1,2,2,1,4],[3,3,1,0,0,0],[3,3,0,0,0,0]],
        [[3,3,4,0,0,0],[3,3,1,0,1,4],[0,1,2,2,2,0],[0,0,2,2,2,0],[0,0,1,0,0,4],[0,0,4,0,0,1]],
        [[3,3,0,0,0,0],[3,3,0,1,0,0],[4,1,2,2,1,4],[0,0,2,2,0,0],[0,0,2,2,1,0],[1,4,0,0,4,0]],
        [[1,0,0,4,3,3],[4,0,0,1,3,3],[0,2,2,2,0,0],[0,2,2,2,1,0],[4,1,0,1,0,0],[0,0,0,4,0,0]],
        [[0,4,0,0,4,1],[0,1,2,2,0,0],[0,0,2,2,0,0],[4,1,2,2,1,4],[0,0,1,0,3,3],[0,0,0,0,3,3]],
        [[0,0,4,0,0,0],[0,0,1,0,1,4],[0,1,2,2,2,0],[0,0,2,2,2,0],[3,3,1,0,0,4],[3,3,4,0,0,1]],
        [[2,2,2,0,0,0],[2,2,2,1,0,0],[4,1,0,0,1,4],[3,3,0,0,0,0],[3,3,0,0,1,0],[1,4,0,0,4,0]],
        [[1,3,3,4,2,2],[4,3,3,1,2,2],[0,0,0,0,2,2],[0,0,0,0,1,0],[4,1,0,1,0,0],[0,0,0,4,0,0]],
        [[0,4,0,0,4,1],[0,1,0,0,3,3],[0,0,0,0,3,3],[4,1,0,0,1,4],[0,0,1,2,2,2],[0,0,0,2,2,2]],
        [[0,0,4,0,0,0],[0,0,1,0,1,4],[0,1,0,0,0,0],[2,2,0,0,0,0],[2,2,1,3,3,4],[2,2,4,3,3,1]],
        [[2,2,2,0,0,0],[2,2,2,1,0,0],[4,1,0,0,1,4],[0,0,0,0,0,0],[0,0,3,3,1,0],[1,4,3,3,4,0]],
        [[1,0,0,4,2,2],[4,0,0,1,2,2],[3,3,0,0,2,2],[3,3,0,0,1,0],[4,1,0,1,0,0],[0,0,0,4,0,0]],
        [[0,4,3,3,4,1],[0,1,3,3,0,0],[0,0,0,0,0,0],[4,1,0,0,1,4],[0,0,1,2,2,2],[0,0,0,2,2,2]],
        [[0,0,4,0,0,0],[0,0,1,0,1,4],[0,1,0,0,3,3],[2,2,0,0,3,3],[2,2,1,0,0,4],[2,2,4,0,0,1]],
        [[2,2,2,0,0,0],[2,2,2,1,0,0],[0,1,0,0,1,0],[4,0,0,0,4,0],[4,3,3,0,1,0],[1,3,3,4,0,0]],
        [[1,4,4,0,2,2],[3,3,0,1,2,2],[3,3,0,0,2,2],[4,0,0,0,1,0],[0,1,4,1,0,0],[0,0,0,0,0,0]],
        [[0,0,4,3,3,1],[0,1,0,3,3,4],[0,4,0,0,0,4],[0,1,0,0,1,0],[0,0,1,2,2,2],[0,0,0,2,2,2]],
        [[0,0,0,0,0,0],[0,0,1,4,1,0],[0,1,0,0,0,4],[2,2,0,0,3,3],[2,2,1,0,3,3],[2,2,0,4,4,1]],
        [[2,2,2,0,0,0],[2,2,2,1,0,0],[0,1,3,3,1,0],[4,0,3,3,4,0],[4,0,0,0,1,0],[1,0,0,4,0,0]],
        [[1,4,4,0,2,2],[0,0,0,1,2,2],[0,0,3,3,2,2],[4,0,3,3,1,0],[0,1,4,1,0,0],[0,0,0,0,0,0]],
        [[0,0,4,0,0,1],[0,1,0,0,0,4],[0,4,3,3,0,4],[0,1,3,3,1,0],[0,0,1,2,2,2],[0,0,0,2,2,2]],
        [[0,0,0,0,0,0],[0,0,1,4,1,0],[0,1,3,3,0,4],[2,2,3,3,0,0],[2,2,1,0,0,0],[2,2,0,4,4,1]],
        [[0,0,4,0,2,2],[0,0,0,1,2,2],[1,4,0,0,2,2],[4,0,1,4,0,1],[0,0,0,1,3,3],[0,0,0,0,3,3]],
        [[0,0,4,1,0,0],[0,0,0,4,0,0],[0,0,1,0,0,4],[0,1,4,0,1,0],[3,3,0,2,2,2],[3,3,1,2,2,2]],
        [[3,3,0,0,0,0],[3,3,1,0,0,0],[1,0,4,1,0,4],[2,2,0,0,4,1],[2,2,1,0,0,0],[2,2,0,4,0,0]],
        [[2,2,2,1,3,3],[2,2,2,0,3,3],[0,1,0,4,1,0],[4,0,0,1,0,0],[0,0,4,0,0,0],[0,0,1,4,0,0]],
        [[0,0,4,0,2,2],[0,0,0,1,2,2],[1,4,0,0,2,2],[4,0,1,4,0,1],[3,3,0,1,0,0],[3,3,0,0,0,0]],
        [[3,3,4,1,0,0],[3,3,0,4,0,0],[0,0,1,0,0,4],[0,1,4,0,1,0],[0,0,0,2,2,2],[0,0,1,2,2,2]],
        [[0,0,0,0,3,3],[0,0,1,0,3,3],[1,0,4,1,0,4],[2,2,0,0,4,1],[2,2,1,0,0,0],[2,2,0,4,0,0]],
        [[2,2,2,1,0,0],[2,2,2,0,0,0],[0,1,0,4,1,0],[4,0,0,1,0,0],[0,0,4,0,3,3],[0,0,1,4,3,3]],
        [[3,3,0,0,2,2],[3,3,0,1,2,2],[1,0,4,4,2,2],[0,0,1,0,0,1],[0,0,4,1,4,0],[0,0,0,0,0,0]],
        [[0,0,0,1,3,3],[0,0,0,0,3,3],[0,4,1,4,0,0],[0,1,0,4,1,0],[0,4,0,2,2,2],[0,0,1,2,2,2]],
        [[0,0,0,0,0,0],[0,4,1,4,0,0],[1,0,0,1,0,0],[2,2,4,4,0,1],[2,2,1,0,3,3],[2,2,0,0,3,3]],
        [[2,2,2,1,0,0],[2,2,2,0,4,0],[0,1,4,0,1,0],[0,0,4,1,4,0],[3,3,0,0,0,0],[3,3,1,0,0,0]],
        [[0,0,0,0,2,2],[0,0,0,1,2,2],[1,0,4,4,2,2],[3,3,1,0,0,1],[3,3,4,1,4,0],[0,0,0,0,0,0]],
        [[0,3,3,1,0,0],[0,3,3,0,0,0],[0,4,1,4,0,0],[0,1,0,4,1,0],[0,4,0,2,2,2],[0,0,1,2,2,2]],
        [[0,0,0,0,0,0],[0,4,1,4,3,3],[1,0,0,1,3,3],[2,2,4,4,0,1],[2,2,1,0,0,0],[2,2,0,0,0,0]],
        [[2,2,2,1,0,0],[2,2,2,0,4,0],[0,1,4,0,1,0],[0,0,4,1,4,0],[0,0,0,3,3,0],[0,0,1,3,3,0]],
        [[3,3,4,0,0,0],[3,3,0,1,0,0],[1,4,0,0,0,0],[4,0,1,4,0,1],[2,2,2,1,0,0],[2,2,2,0,0,0]],
        [[2,2,4,1,3,3],[2,2,0,4,3,3],[2,2,1,0,0,4],[0,1,4,0,1,0],[0,0,0,0,0,0],[0,0,1,0,0,0]],
        [[0,0,0,2,2,2],[0,0,1,2,2,2],[1,0,4,1,0,4],[0,0,0,0,4,1],[0,0,1,0,3,3],[0,0,0,4,3,3]],
        [[0,0,0,1,0,0],[0,0,0,0,0,0],[0,1,0,4,1,0],[4,0,0,1,2,2],[3,3,4,0,2,2],[3,3,1,4,2,2]],
        [[0,0,4,0,0,0],[0,0,0,1,3,3],[1,4,0,0,3,3],[4,0,1,4,0,1],[2,2,2,1,0,0],[2,2,2,0,0,0]],
        [[2,2,4,1,0,0],[2,2,0,4,0,0],[2,2,1,0,0,4],[0,1,4,0,1,0],[0,0,0,3,3,0],[0,0,1,3,3,0]],
        [[0,0,0,2,2,2],[0,0,1,2,2,2],[1,0,4,1,0,4],[3,3,0,0,4,1],[3,3,1,0,0,0],[0,0,0,4,0,0]],
        [[0,3,3,1,0,0],[0,3,3,0,0,0],[0,1,0,4,1,0],[4,0,0,1,2,2],[0,0,4,0,2,2],[0,0,1,4,2,2]],
        [[0,0,0,0,4,0],[0,3,3,1,0,4],[1,3,3,0,4,0],[0,0,1,0,0,1],[2,2,2,1,0,0],[2,2,2,4,0,0]],
        [[2,2,0,1,0,0],[2,2,0,3,3,0],[2,2,1,3,3,0],[4,1,0,0,1,0],[0,0,0,4,0,4],[0,0,1,0,4,0]],
        [[0,0,4,2,2,2],[0,0,1,2,2,2],[1,0,0,1,0,0],[0,4,0,3,3,1],[4,0,1,3,3,0],[0,4,0,0,0,0]],
        [[0,4,0,1,0,0],[4,0,4,0,0,0],[0,1,0,0,1,4],[0,3,3,1,2,2],[0,3,3,0,2,2],[0,0,1,0,2,2]],
        [[0,0,0,0,4,0],[0,0,0,1,0,4],[1,0,0,0,4,0],[0,0,1,0,0,1],[2,2,2,1,3,3],[2,2,2,4,3,3]],
        [[2,2,0,1,0,0],[2,2,0,0,0,0],[2,2,1,0,0,0],[4,1,0,0,1,0],[3,3,0,4,0,4],[3,3,1,0,4,0]],
        [[3,3,4,2,2,2],[3,3,1,2,2,2],[1,0,0,1,0,0],[0,4,0,0,0,1],[4,0,1,0,0,0],[0,4,0,0,0,0]],
        [[0,4,0,1,3,3],[4,0,4,0,3,3],[0,1,0,0,1,4],[0,0,0,1,2,2],[0,0,0,0,2,2],[0,0,1,0,2,2]],
        [[0,0,0,0,4,0],[0,0,0,1,0,4],[1,0,0,0,4,0],[2,2,1,0,0,1],[2,2,0,1,3,3],[2,2,0,4,3,3]],
        [[2,2,2,1,0,0],[2,2,2,0,0,0],[0,0,1,0,0,0],[4,1,0,0,1,0],[3,3,0,4,0,4],[3,3,1,0,4,0]],
        [[3,3,4,0,2,2],[3,3,1,0,2,2],[1,0,0,1,2,2],[0,4,0,0,0,1],[4,0,1,0,0,0],[0,4,0,0,0,0]],
        [[0,4,0,1,3,3],[4,0,4,0,3,3],[0,1,0,0,1,4],[0,0,0,1,0,0],[0,0,0,2,2,2],[0,0,1,2,2,2]],
        [[3,3,0,0,4,0],[3,3,0,1,0,4],[1,0,0,0,4,0],[2,2,1,0,0,1],[2,2,0,1,0,0],[2,2,0,4,0,0]],
        [[2,2,2,1,3,3],[2,2,2,0,3,3],[0,0,1,0,0,0],[4,1,0,0,1,0],[0,0,0,4,0,4],[0,0,1,0,4,0]],
        [[0,0,4,0,2,2],[0,0,1,0,2,2],[1,0,0,1,2,2],[0,4,0,0,0,1],[4,0,1,0,3,3],[0,4,0,0,3,3]],
        [[0,4,0,1,0,0],[4,0,4,0,0,0],[0,1,0,0,1,4],[0,0,0,1,0,0],[3,3,0,2,2,2],[3,3,1,2,2,2]],
        [[2,2,2,0,3,3],[2,2,2,1,3,3],[1,0,4,4,0,0],[0,0,1,0,0,1],[0,0,4,1,4,0],[0,0,0,0,0,0]],
        [[0,0,0,1,2,2],[0,0,0,0,2,2],[0,4,1,4,2,2],[0,1,0,4,1,0],[0,4,0,0,3,3],[0,0,1,0,3,3]],
        [[0,0,0,0,0,0],[0,4,1,4,0,0],[1,0,0,1,0,0],[0,0,4,4,0,1],[3,3,1,2,2,2],[3,3,0,2,2,2]],
        [[3,3,0,1,0,0],[3,3,0,0,4,0],[0,1,4,0,1,0],[2,2,4,1,4,0],[2,2,0,0,0,0],[2,2,1,0,0,0]],
        [[2,2,2,0,0,0],[2,2,2,1,0,0],[1,0,4,4,0,0],[0,0,1,0,0,1],[3,3,4,1,4,0],[3,3,0,0,0,0]],
        [[3,3,0,1,2,2],[3,3,0,0,2,2],[0,4,1,4,2,2],[0,1,0,4,1,0],[0,4,0,0,0,0],[0,0,1,0,0,0]],
        [[0,0,0,0,3,3],[0,4,1,4,3,3],[1,0,0,1,0,0],[0,0,4,4,0,1],[0,0,1,2,2,2],[0,0,0,2,2,2]],
        [[0,0,0,1,0,0],[0,0,0,0,4,0],[0,1,4,0,1,0],[2,2,4,1,4,0],[2,2,0,0,3,3],[2,2,1,0,3,3]],
        [[2,2,2,4,0,0],[2,2,2,1,0,0],[1,0,0,3,3,4],[0,0,1,3,3,1],[0,0,0,1,0,0],[4,0,0,0,0,4]],
        [[4,0,0,1,2,2],[0,0,0,0,2,2],[0,0,1,0,2,2],[0,1,3,3,1,4],[0,0,3,3,0,0],[4,0,1,4,0,0]],
        [[4,0,0,0,0,4],[0,0,1,0,0,0],[1,3,3,1,0,0],[4,3,3,0,0,1],[0,0,1,2,2,2],[0,0,4,2,2,2]],
        [[0,0,4,1,0,4],[0,0,3,3,0,0],[4,1,3,3,1,0],[2,2,0,1,0,0],[2,2,0,0,0,0],[2,2,1,0,0,4]],
        [[2,2,2,4,0,0],[2,2,2,1,0,0],[1,0,0,0,0,4],[0,0,1,0,0,1],[0,3,3,1,0,0],[4,3,3,0,0,4]],
        [[4,0,0,1,2,2],[3,3,0,0,2,2],[3,3,1,0,2,2],[0,1,0,0,1,4],[0,0,0,0,0,0],[4,0,1,4,0,0]],
        [[4,0,0,3,3,4],[0,0,1,3,3,0],[1,0,0,1,0,0],[4,0,0,0,0,1],[0,0,1,2,2,2],[0,0,4,2,2,2]],
        [[0,0,4,1,0,4],[0,0,0,0,0,0],[4,1,0,0,1,0],[2,2,0,1,3,3],[2,2,0,0,3,3],[2,2,1,0,0,4]],
        [[0,2,2,4,3,3],[0,2,2,1,3,3],[1,2,2,0,0,4],[0,0,1,0,0,1],[0,0,0,1,0,0],[4,0,0,0,0,4]],
        [[4,0,0,1,0,0],[0,0,0,2,2,2],[0,0,1,2,2,2],[0,1,0,0,1,4],[0,0,0,0,3,3],[4,0,1,4,3,3]],
        [[4,0,0,0,0,4],[0,0,1,0,0,0],[1,0,0,1,0,0],[4,0,0,2,2,1],[3,3,1,2,2,0],[3,3,4,2,2,0]],
        [[3,3,4,1,0,4],[3,3,0,0,0,0],[4,1,0,0,1,0],[2,2,2,1,0,0],[2,2,2,0,0,0],[0,0,1,0,0,4]],
        [[0,2,2,4,0,0],[0,2,2,1,0,0],[1,2,2,0,0,4],[3,3,1,0,0,1],[3,3,0,1,0,0],[4,0,0,0,0,4]],
        [[4,3,3,1,0,0],[0,3,3,2,2,2],[0,0,1,2,2,2],[0,1,0,0,1,4],[0,0,0,0,0,0],[4,0,1,4,0,0]],
        [[4,0,0,0,0,4],[0,0,1,0,3,3],[1,0,0,1,3,3],[4,0,0,2,2,1],[0,0,1,2,2,0],[0,0,4,2,2,0]],
        [[0,0,4,1,0,4],[0,0,0,0,0,0],[4,1,0,0,1,0],[2,2,2,1,0,0],[2,2,2,3,3,0],[0,0,1,3,3,4]],
        [[0,0,3,3,0,4],[4,1,3,3,1,0],[0,0,0,0,0,0],[1,4,4,1,0,0],[0,0,2,2,2,1],[0,0,2,2,2,0]],
        [[0,0,1,0,4,0],[0,0,4,0,1,0],[2,2,4,0,3,3],[2,2,1,0,3,3],[2,2,0,0,1,0],[0,1,0,0,0,4]],
        [[0,2,2,2,0,0],[1,2,2,2,0,0],[0,0,1,4,4,1],[0,0,0,0,0,0],[0,1,3,3,1,4],[4,0,3,3,0,0]],
        [[4,0,0,0,1,0],[0,1,0,0,2,2],[3,3,0,1,2,2],[3,3,0,4,2,2],[0,1,0,4,0,0],[0,4,0,1,0,0]],
        [[0,0,0,0,0,4],[4,1,0,0,1,0],[0,0,0,0,0,0],[1,4,4,1,0,0],[3,3,2,2,2,1],[3,3,2,2,2,0]],
        [[3,3,1,0,4,0],[3,3,4,0,1,0],[2,2,4,0,0,0],[2,2,1,0,0,0],[2,2,0,0,1,0],[0,1,0,0,0,4]],
        [[0,2,2,2,3,3],[1,2,2,2,3,3],[0,0,1,4,4,1],[0,0,0,0,0,0],[0,1,0,0,1,4],[4,0,0,0,0,0]],
        [[4,0,0,0,1,0],[0,1,0,0,2,2],[0,0,0,1,2,2],[0,0,0,4,2,2],[0,1,0,4,3,3],[0,4,0,1,3,3]],
        [[0,4,3,3,0,0],[0,1,3,3,1,0],[0,0,0,0,4,0],[1,0,0,1,0,0],[4,2,2,2,0,1],[4,2,2,2,0,0]],
        [[4,4,1,0,0,0],[2,2,0,0,1,4],[2,2,0,0,3,3],[2,2,1,0,3,3],[0,0,0,4,1,0],[0,1,0,0,0,0]],
        [[0,0,2,2,2,4],[1,0,2,2,2,4],[0,0,1,0,0,1],[0,4,0,0,0,0],[0,1,3,3,1,0],[0,0,3,3,4,0]],
        [[0,0,0,0,1,0],[0,1,4,0,0,0],[3,3,0,1,2,2],[3,3,0,0,2,2],[4,1,0,0,2,2],[0,0,0,1,4,4]],
        [[0,4,0,0,0,0],[0,1,0,0,1,0],[0,3,3,0,4,0],[1,3,3,1,0,0],[4,2,2,2,0,1],[4,2,2,2,0,0]],
        [[4,4,1,0,0,0],[2,2,3,3,1,4],[2,2,3,3,0,0],[2,2,1,0,0,0],[0,0,0,4,1,0],[0,1,0,0,0,0]],
        [[0,0,2,2,2,4],[1,0,2,2,2,4],[0,0,1,3,3,1],[0,4,0,3,3,0],[0,1,0,0,1,0],[0,0,0,0,4,0]],
        [[0,0,0,0,1,0],[0,1,4,0,0,0],[0,0,0,1,2,2],[0,0,3,3,2,2],[4,1,3,3,2,2],[0,0,0,1,4,4]],
        [[0,0,0,0,4,0],[0,1,0,0,1,0],[0,4,0,0,3,3],[1,0,0,1,3,3],[2,2,2,0,4,1],[2,2,2,4,0,0]],
        [[2,2,1,0,0,0],[2,2,0,4,1,0],[2,2,0,0,0,0],[4,0,1,0,0,0],[0,4,3,3,1,4],[0,1,3,3,0,0]],
        [[0,0,4,2,2,2],[1,4,0,2,2,2],[3,3,1,0,0,1],[3,3,0,0,4,0],[0,1,0,0,1,0],[0,4,0,0,0,0]],
        [[0,0,3,3,1,0],[4,1,3,3,4,0],[0,0,0,1,0,4],[0,0,0,0,2,2],[0,1,4,0,2,2],[0,0,0,1,2,2]],
        [[0,0,0,0,4,0],[0,1,3,3,1,0],[0,4,3,3,0,0],[1,0,0,1,0,0],[2,2,2,0,4,1],[2,2,2,4,0,0]],
        [[2,2,1,0,0,0],[2,2,0,4,1,0],[2,2,0,3,3,0],[4,0,1,3,3,0],[0,4,0,0,1,4],[0,1,0,0,0,0]],
        [[0,0,4,2,2,2],[1,4,0,2,2,2],[0,0,1,0,0,1],[0,0,3,3,4,0],[0,1,3,3,1,0],[0,4,0,0,0,0]],
        [[0,0,0,0,1,0],[4,1,0,0,4,0],[0,3,3,1,0,4],[0,3,3,0,2,2],[0,1,4,0,2,2],[0,0,0,1,2,2]],
        [[4,0,0,0,0,0],[0,1,0,0,1,4],[0,3,3,4,0,0],[1,3,3,1,0,0],[2,2,2,0,0,1],[2,2,2,0,0,4]],
        [[2,2,1,0,0,4],[2,2,3,3,1,0],[2,2,3,3,0,0],[0,0,1,4,0,0],[0,0,0,0,1,0],[4,1,0,0,4,0]],
        [[4,0,0,2,2,2],[1,0,0,2,2,2],[0,0,1,3,3,1],[0,0,4,3,3,0],[4,1,0,0,1,0],[0,0,0,0,0,4]],
        [[0,4,0,0,1,4],[0,1,0,0,0,0],[0,0,4,1,0,0],[0,0,3,3,2,2],[0,1,3,3,2,2],[4,0,0,1,2,2]],
        [[4,0,3,3,0,0],[0,1,3,3,1,4],[0,0,0,4,0,0],[1,0,0,1,0,0],[2,2,2,0,0,1],[2,2,2,0,0,4]],
        [[2,2,1,0,0,4],[2,2,0,0,1,0],[2,2,0,0,3,3],[0,0,1,4,3,3],[0,0,0,0,1,0],[4,1,0,0,4,0]],
        [[4,0,0,2,2,2],[1,0,0,2,2,2],[0,0,1,0,0,1],[0,0,4,0,0,0],[4,1,3,3,1,0],[0,0,3,3,0,4]],
        [[0,4,0,0,1,4],[0,1,0,0,0,0],[3,3,4,1,0,0],[3,3,0,0,2,2],[0,1,0,0,2,2],[4,0,0,1,2,2]],
        [[0,0,0,0,4,0],[0,1,0,0,1,0],[0,4,0,0,3,3],[1,2,2,1,3,3],[0,2,2,0,4,1],[0,2,2,4,0,0]],
        [[0,0,1,0,0,0],[2,2,2,4,1,0],[2,2,2,0,0,0],[4,0,1,0,0,0],[0,4,3,3,1,4],[0,1,3,3,0,0]],
        [[0,0,4,2,2,0],[1,4,0,2,2,0],[3,3,1,2,2,1],[3,3,0,0,4,0],[0,1,0,0,1,0],[0,4,0,0,0,0]],
        [[0,0,3,3,1,0],[4,1,3,3,4,0],[0,0,0,1,0,4],[0,0,0,2,2,2],[0,1,4,2,2,2],[0,0,0,1,0,0]],
        [[0,0,3,3,4,0],[0,1,3,3,1,0],[0,4,0,0,0,0],[1,2,2,1,0,0],[0,2,2,0,4,1],[0,2,2,4,0,0]],
        [[0,0,1,0,0,0],[2,2,2,4,1,0],[2,2,2,0,3,3],[4,0,1,0,3,3],[0,4,0,0,1,4],[0,1,0,0,0,0]],
        [[0,0,4,2,2,0],[1,4,0,2,2,0],[0,0,1,2,2,1],[0,0,0,0,4,0],[0,1,3,3,1,0],[0,4,3,3,0,0]],
        [[0,0,0,0,1,0],[4,1,0,0,4,0],[3,3,0,1,0,4],[3,3,0,2,2,2],[0,1,4,2,2,2],[0,0,0,1,0,0]],
        [[0,4,0,0,0,0],[0,1,3,3,1,0],[0,0,3,3,4,0],[1,2,2,1,0,0],[4,2,2,0,0,1],[4,2,2,0,0,0]],
        [[4,4,1,0,0,0],[2,2,2,0,1,4],[2,2,2,3,3,0],[0,0,1,3,3,0],[0,0,0,4,1,0],[0,1,0,0,0,0]],
        [[0,0,0,2,2,4],[1,0,0,2,2,4],[0,0,1,2,2,1],[0,4,3,3,0,0],[0,1,3,3,1,0],[0,0,0,0,4,0]],
        [[0,0,0,0,1,0],[0,1,4,0,0,0],[0,3,3,1,0,0],[0,3,3,2,2,2],[4,1,0,2,2,2],[0,0,0,1,4,4]],
        [[0,4,0,0,0,0],[0,1,0,0,1,0],[0,0,0,0,4,0],[1,2,2,1,0,0],[4,2,2,3,3,1],[4,2,2,3,3,0]],
        [[4,4,1,0,0,0],[2,2,2,0,1,4],[2,2,2,0,0,0],[3,3,1,0,0,0],[3,3,0,4,1,0],[0,1,0,0,0,0]],
        [[0,3,3,2,2,4],[1,3,3,2,2,4],[0,0,1,2,2,1],[0,4,0,0,0,0],[0,1,0,0,1,0],[0,0,0,0,4,0]],
        [[0,0,0,0,1,0],[0,1,4,0,3,3],[0,0,0,1,3,3],[0,0,0,2,2,2],[4,1,0,2,2,2],[0,0,0,1,4,4]],
        [[4,0,0,0,0,0],[0,1,0,0,1,4],[0,2,2,4,3,3],[1,2,2,1,3,3],[0,2,2,0,0,1],[0,0,0,0,0,4]],
        [[0,0,1,0,0,4],[0,2,2,2,1,0],[0,2,2,2,0,0],[0,0,1,4,0,0],[0,0,3,3,1,0],[4,1,3,3,4,0]],
        [[4,0,0,0,0,0],[1,0,0,2,2,0],[3,3,1,2,2,1],[3,3,4,2,2,0],[4,1,0,0,1,0],[0,0,0,0,0,4]],
        [[0,4,3,3,1,4],[0,1,3,3,0,0],[0,0,4,1,0,0],[0,0,2,2,2,0],[0,1,2,2,2,0],[4,0,0,1,0,0]],
        [[4,0,0,0,0,0],[0,1,0,0,1,4],[0,2,2,4,0,0],[1,2,2,1,0,0],[0,2,2,3,3,1],[0,0,0,3,3,4]],
        [[0,0,1,0,0,4],[0,2,2,2,1,0],[0,2,2,2,0,0],[3,3,1,4,0,0],[3,3,0,0,1,0],[4,1,0,0,4,0]],
        [[4,3,3,0,0,0],[1,3,3,2,2,0],[0,0,1,2,2,1],[0,0,4,2,2,0],[4,1,0,0,1,0],[0,0,0,0,0,4]],
        [[0,4,0,0,1,4],[0,1,0,0,3,3],[0,0,4,1,3,3],[0,0,2,2,2,0],[0,1,2,2,2,0],[4,0,0,1,0,0]],
        [[0,0,2,2,0,4],[4,1,2,2,1,0],[0,0,2,2,3,3],[1,4,4,1,3,3],[0,0,0,0,0,1],[0,0,0,0,0,0]],
        [[0,0,1,0,4,0],[0,0,4,0,1,0],[0,0,4,2,2,2],[0,0,1,2,2,2],[0,0,3,3,1,0],[0,1,3,3,0,4]],
        [[0,0,0,0,0,0],[1,0,0,0,0,0],[3,3,1,4,4,1],[3,3,2,2,0,0],[0,1,2,2,1,4],[4,0,2,2,0,0]],
        [[4,0,3,3,1,0],[0,1,3,3,0,0],[2,2,2,1,0,0],[2,2,2,4,0,0],[0,1,0,4,0,0],[0,4,0,1,0,0]],
        [[0,4,1,0,0,0],[4,0,0,0,1,0],[1,0,3,3,2,2],[0,1,3,3,2,2],[4,0,0,1,2,2],[0,0,0,0,4,0]],
        [[0,4,0,1,4,0],[0,0,1,0,0,4],[0,0,3,3,0,1],[0,1,3,3,0,0],[4,2,2,2,1,0],[0,2,2,2,0,0]],
        [[0,4,0,0,0,0],[2,2,1,0,0,4],[2,2,3,3,1,0],[2,2,3,3,0,1],[0,1,0,0,0,4],[0,0,0,1,4,0]],
        [[0,0,2,2,2,0],[0,1,2,2,2,4],[0,0,3,3,1,0],[1,0,3,3,0,0],[4,0,0,1,0,0],[0,4,1,0,4,0]],
        [[0,4,1,0,0,0],[4,3,3,0,1,0],[1,3,3,0,2,2],[0,1,0,0,2,2],[4,0,0,1,2,2],[0,0,0,0,4,0]],
        [[0,4,0,1,4,0],[0,0,1,3,3,4],[0,0,0,3,3,1],[0,1,0,0,0,0],[4,2,2,2,1,0],[0,2,2,2,0,0]],
        [[0,4,0,0,0,0],[2,2,1,0,0,4],[2,2,0,0,1,0],[2,2,0,3,3,1],[0,1,0,3,3,4],[0,0,0,1,4,0]],
        [[0,0,2,2,2,0],[0,1,2,2,2,4],[0,0,0,0,1,0],[1,3,3,0,0,0],[4,3,3,1,0,0],[0,4,1,0,4,0]],
        [[0,0,1,0,0,4],[0,0,0,0,1,0],[1,0,0,0,0,0],[0,1,4,4,2,2],[0,3,3,1,2,2],[4,3,3,0,2,2]],
        [[4,0,0,1,0,0],[3,3,1,0,0,0],[3,3,4,0,0,1],[0,1,4,0,0,0],[2,2,2,0,1,0],[2,2,2,0,0,4]],
        [[2,2,0,3,3,4],[2,2,1,3,3,0],[2,2,4,4,1,0],[0,0,0,0,0,1],[0,1,0,0,0,0],[4,0,0,1,0,0]],
        [[4,0,0,2,2,2],[0,1,0,2,2,2],[0,0,0,4,1,0],[1,0,0,4,3,3],[0,0,0,1,3,3],[0,0,1,0,0,4]],
        [[3,3,1,0,0,4],[3,3,0,0,1,0],[1,0,0,0,0,0],[0,1,4,4,2,2],[0,0,0,1,2,2],[4,0,0,0,2,2]],
        [[4,0,0,1,3,3],[0,0,1,0,3,3],[0,0,4,0,0,1],[0,1,4,0,0,0],[2,2,2,0,1,0],[2,2,2,0,0,4]],
        [[2,2,0,0,0,4],[2,2,1,0,0,0],[2,2,4,4,1,0],[0,0,0,0,0,1],[0,1,0,0,3,3],[4,0,0,1,3,3]],
        [[4,0,0,2,2,2],[0,1,0,2,2,2],[0,0,0,4,1,0],[1,0,0,4,0,0],[3,3,0,1,0,0],[3,3,1,0,0,4]],
        [[0,0,1,0,0,0],[0,0,0,4,1,4],[1,4,0,2,2,2],[0,1,0,2,2,2],[0,0,0,1,3,3],[0,0,0,4,3,3]],
        [[0,0,0,1,0,0],[0,0,1,4,0,0],[0,0,0,0,0,1],[4,1,2,2,4,0],[3,3,2,2,1,0],[3,3,2,2,4,0]],
        [[3,3,4,0,0,0],[3,3,1,0,0,0],[2,2,2,0,1,0],[2,2,2,0,4,1],[4,1,4,0,0,0],[0,0,0,1,0,0]],
        [[0,4,2,2,3,3],[0,1,2,2,3,3],[0,4,2,2,1,4],[1,0,0,0,0,0],[0,0,4,1,0,0],[0,0,1,0,0,0]],
        [[3,3,1,0,0,0],[3,3,0,4,1,4],[1,4,0,2,2,2],[0,1,0,2,2,2],[0,0,0,1,0,0],[0,0,0,4,0,0]],
        [[0,0,0,1,3,3],[0,0,1,4,3,3],[0,0,0,0,0,1],[4,1,2,2,4,0],[0,0,2,2,1,0],[0,0,2,2,4,0]],
        [[0,0,4,0,0,0],[0,0,1,0,0,0],[2,2,2,0,1,0],[2,2,2,0,4,1],[4,1,4,0,3,3],[0,0,0,1,3,3]],
        [[0,4,2,2,0,0],[0,1,2,2,0,0],[0,4,2,2,1,4],[1,0,0,0,0,0],[3,3,4,1,0,0],[3,3,1,0,0,0]],
        [[0,0,1,0,0,0],[0,0,0,0,1,0],[1,0,2,2,2,4],[4,1,2,2,2,4],[3,3,0,1,0,0],[3,3,4,0,0,0]],
        [[3,3,4,1,0,0],[3,3,1,0,0,0],[4,0,2,2,0,1],[0,1,2,2,0,0],[0,0,2,2,1,0],[0,0,4,4,0,0]],
        [[0,0,0,4,3,3],[0,0,1,0,3,3],[4,2,2,2,1,4],[4,2,2,2,0,1],[0,1,0,0,0,0],[0,0,0,1,0,0]],
        [[0,0,4,4,0,0],[0,1,2,2,0,0],[0,0,2,2,1,0],[1,0,2,2,0,4],[0,0,0,1,3,3],[0,0,1,4,3,3]],
        [[3,3,1,0,0,0],[3,3,0,0,1,0],[1,0,2,2,2,4],[4,1,2,2,2,4],[0,0,0,1,0,0],[0,0,4,0,0,0]],
        [[0,0,4,1,3,3],[0,0,1,0,3,3],[4,0,2,2,0,1],[0,1,2,2,0,0],[0,0,2,2,1,0],[0,0,4,4,0,0]],
        [[0,0,0,4,0,0],[0,0,1,0,0,0],[4,2,2,2,1,4],[4,2,2,2,0,1],[0,1,0,0,3,3],[0,0,0,1,3,3]],
        [[0,0,4,4,0,0],[0,1,2,2,0,0],[0,0,2,2,1,0],[1,0,2,2,0,4],[3,3,0,1,0,0],[3,3,1,4,0,0]],
        [[0,0,1,0,0,0],[0,0,0,4,1,4],[1,4,0,0,3,3],[0,1,0,0,3,3],[2,2,2,1,0,0],[2,2,2,4,0,0]],
        [[2,2,0,1,0,0],[2,2,1,4,0,0],[2,2,0,0,0,1],[4,1,0,0,4,0],[0,0,3,3,1,0],[0,0,3,3,4,0]],
        [[0,0,4,2,2,2],[0,0,1,2,2,2],[3,3,0,0,1,0],[3,3,0,0,4,1],[4,1,4,0,0,0],[0,0,0,1,0,0]],
        [[0,4,3,3,0,0],[0,1,3,3,0,0],[0,4,0,0,1,4],[1,0,0,0,2,2],[0,0,4,1,2,2],[0,0,1,0,2,2]],
        [[0,0,1,0,0,0],[0,0,0,4,1,4],[1,4,0,0,0,0],[0,1,0,0,0,0],[2,2,2,1,3,3],[2,2,2,4,3,3]],
        [[2,2,0,1,0,0],[2,2,1,4,0,0],[2,2,0,0,0,1],[4,1,0,0,4,0],[3,3,0,0,1,0],[3,3,0,0,4,0]],
        [[3,3,4,2,2,2],[3,3,1,2,2,2],[0,0,0,0,1,0],[0,0,0,0,4,1],[4,1,4,0,0,0],[0,0,0,1,0,0]],
        [[0,4,0,0,3,3],[0,1,0,0,3,3],[0,4,0,0,1,4],[1,0,0,0,2,2],[0,0,4,1,2,2],[0,0,1,0,2,2]],
        [[0,0,1,0,0,4],[0,2,2,2,1,0],[1,2,2,2,3,3],[0,1,4,4,3,3],[0,0,0,1,0,0],[4,0,0,0,0,0]],
        [[4,0,0,1,0,0],[0,0,1,2,2,0],[0,0,4,2,2,1],[0,1,4,2,2,0],[0,0,3,3,1,0],[0,0,3,3,0,4]],
        [[0,0,0,0,0,4],[0,0,1,0,0,0],[3,3,4,4,1,0],[3,3,2,2,2,1],[0,1,2,2,2,0],[4,0,0,1,0,0]],
        [[4,0,3,3,0,0],[0,1,3,3,0,0],[0,2,2,4,1,0],[1,2,2,4,0,0],[0,2,2,1,0,0],[0,0,1,0,0,4]],
        [[0,0,1,0,0,4],[0,2,2,2,1,0],[1,2,2,2,0,0],[0,1,4,4,0,0],[0,3,3,1,0,0],[4,3,3,0,0,0]],
        [[4,0,0,1,0,0],[3,3,1,2,2,0],[3,3,4,2,2,1],[0,1,4,2,2,0],[0,0,0,0,1,0],[0,0,0,0,0,4]],
        [[0,0,0,3,3,4],[0,0,1,3,3,0],[0,0,4,4,1,0],[0,0,2,2,2,1],[0,1,2,2,2,0],[4,0,0,1,0,0]],
        [[4,0,0,0,0,0],[0,1,0,0,0,0],[0,2,2,4,1,0],[1,2,2,4,3,3],[0,2,2,1,3,3],[0,0,1,0,0,4]],
        [[0,4,1,0,0,0],[4,0,2,2,1,0],[1,0,2,2,3,3],[0,1,2,2,3,3],[4,0,0,1,0,0],[0,0,0,0,4,0]],
        [[0,4,0,1,4,0],[0,0,1,0,0,4],[0,0,2,2,2,1],[0,1,2,2,2,0],[4,0,3,3,1,0],[0,0,3,3,0,0]],
        [[0,4,0,0,0,0],[0,0,1,0,0,4],[3,3,2,2,1,0],[3,3,2,2,0,1],[0,1,2,2,0,4],[0,0,0,1,4,0]],
        [[0,0,3,3,0,0],[0,1,3,3,0,4],[0,2,2,2,1,0],[1,2,2,2,0,0],[4,0,0,1,0,0],[0,4,1,0,4,0]],
        [[0,4,1,0,0,0],[4,0,2,2,1,0],[1,0,2,2,0,0],[0,1,2,2,0,0],[4,3,3,1,0,0],[0,3,3,0,4,0]],
        [[0,4,0,1,4,0],[3,3,1,0,0,4],[3,3,2,2,2,1],[0,1,2,2,2,0],[4,0,0,0,1,0],[0,0,0,0,0,0]],
        [[0,4,0,3,3,0],[0,0,1,3,3,4],[0,0,2,2,1,0],[0,0,2,2,0,1],[0,1,2,2,0,4],[0,0,0,1,4,0]],
        [[0,0,0,0,0,0],[0,1,0,0,0,4],[0,2,2,2,1,0],[1,2,2,2,3,3],[4,0,0,1,3,3],[0,4,1,0,4,0]],
        [[0,0,1,0,0,0],[0,0,2,2,1,0],[1,0,2,2,0,4],[4,1,2,2,0,4],[0,0,0,1,3,3],[0,0,4,0,3,3]],
        [[0,0,4,1,0,0],[0,0,1,0,0,0],[4,0,2,2,2,1],[0,1,2,2,2,0],[3,3,0,0,1,0],[3,3,4,4,0,0]],
        [[3,3,0,4,0,0],[3,3,1,0,0,0],[4,0,2,2,1,4],[4,0,2,2,0,1],[0,1,2,2,0,0],[0,0,0,1,0,0]],
        [[0,0,4,4,3,3],[0,1,0,0,3,3],[0,2,2,2,1,0],[1,2,2,2,0,4],[0,0,0,1,0,0],[0,0,1,4,0,0]],
        [[0,0,1,0,0,0],[0,0,2,2,1,0],[1,0,2,2,0,4],[4,1,2,2,0,4],[3,3,0,1,0,0],[3,3,4,0,0,0]],
        [[3,3,4,1,0,0],[3,3,1,0,0,0],[4,0,2,2,2,1],[0,1,2,2,2,0],[0,0,0,0,1,0],[0,0,4,4,0,0]],
        [[0,0,0,4,3,3],[0,0,1,0,3,3],[4,0,2,2,1,4],[4,0,2,2,0,1],[0,1,2,2,0,0],[0,0,0,1,0,0]],
        [[0,0,4,4,0,0],[0,1,0,0,0,0],[0,2,2,2,1,0],[1,2,2,2,0,4],[0,0,0,1,3,3],[0,0,1,4,3,3]]
    ];

    constructor() {
        this.board = Array(36).fill(null); // 6x6 grid
        this.clickCount = 0;
        this.score = 0;
        this.selectedCell = null;
        this.obstacleProbabilities = Array(36).fill(0);
        this.treasureProbabilities = {
            sword: Array(36).fill(0),
            chest: Array(36).fill(0),
            fox: Array(36).fill(0)
        };
        this.showProbabilities = true;
        this.showTreasureProbabilities = false;
        this.obstaclesConfirmed = false;
        
        this.elements = {
            board: document.getElementById('game-board'),
            remainingClicks: document.getElementById('remaining-clicks'),
            currentScore: document.getElementById('current-score'),
            matchingBoards: document.getElementById('matching-boards'),
            resetBtn: document.getElementById('reset-btn'),
            autoCalculateBtn: document.getElementById('auto-calculate'),
            toggleProbabilitiesBtn: document.getElementById('toggle-probabilities'),
            resultPanel: document.getElementById('result-panel'),
            finalScore: document.getElementById('final-score'),
            resultDetails: document.getElementById('result-details'),
            popup: document.getElementById('cell-popup'),
            popupBtns: document.querySelectorAll('.popup-btn'),
            popupClose: document.querySelector('.popup-close'),
            gameHint: document.getElementById('game-hint')
        };

        this.initializeBoard();
        this.initializeEvents();
        this.calculateObstacleProbabilities();
    }

    initializeBoard() {
        this.elements.board.innerHTML = '';
        for (let i = 0; i < 36; i++) {
            const cell = document.createElement('div');
            cell.className = 'board-cell';
            cell.dataset.index = i;
            this.elements.board.appendChild(cell);
        }
    }

    initializeEvents() {
        // Board cell clicks
        this.handleCellClick = (e) => {
            // Find the board-cell element (could be clicked element or its parent)
            let targetCell = e.target;
            while (targetCell && !targetCell.classList.contains('board-cell')) {
                targetCell = targetCell.parentElement;
            }
            
            if (targetCell && targetCell.classList.contains('board-cell')) {
                this.onCellClick(targetCell);
            }
        };
        this.elements.board.addEventListener('click', this.handleCellClick);

        // Popup buttons
        this.elements.popupBtns.forEach(btn => {
            btn.addEventListener('click', () => {
                this.handlePopupSelection(btn.dataset.type);
            });
        });


        // Popup close
        this.elements.popupClose.addEventListener('click', () => {
            this.closePopup();
        });

        // Close popup on overlay click
        this.elements.popup.addEventListener('click', (e) => {
            if (e.target === this.elements.popup) {
                this.closePopup();
            }
        });

        // Reset button
        this.elements.resetBtn.addEventListener('click', () => {
            this.reset();
        });

        // Auto calculate button
        this.elements.autoCalculateBtn.addEventListener('click', () => {
            this.autoCalculate();
        });

        // Toggle probabilities button
        this.elements.toggleProbabilitiesBtn.addEventListener('click', () => {
            this.toggleProbabilities();
        });
    }

    calculateObstacleProbabilities() {
        // 初始計算：基於所有盤面
        this.updateObstacleProbabilitiesBasedOnMatches();
        console.log(`已載入 ${FauxHollowsFoxes.BOARD_DATA.length} 個盤面配置`);
        this.updateProbabilityDisplay();
        this.updateMatchingBoards();
    }

    updateObstacleProbabilitiesBasedOnMatches() {
        const obstacleCount = Array(36).fill(0);
        let matchingBoardsCount = 0;

        // 只統計符合當前使用者盤面的配置
        for (const board of FauxHollowsFoxes.BOARD_DATA) {
            if (this.boardMatches(board)) {
                matchingBoardsCount++;
                // 統計這個符合盤面中的障礙物位置
                for (let row = 0; row < 6; row++) {
                    for (let col = 0; col < 6; col++) {
                        const index = row * 6 + col;
                        if (board[row][col] === 1) { // 1 代表障礙物
                            obstacleCount[index]++;
                        }
                    }
                }
            }
        }

        // 基於符合的盤面計算機率
        for (let i = 0; i < 36; i++) {
            this.obstacleProbabilities[i] = matchingBoardsCount > 0 ? 
                Math.round((obstacleCount[i] / matchingBoardsCount) * 100) : 0;
        }
    }

    updateTreasureProbabilitiesBasedOnMatches() {
        const treasureCount = {
            sword: Array(36).fill(0),
            chest: Array(36).fill(0),
            fox: Array(36).fill(0)
        };
        let matchingBoardsCount = 0;

        // 只統計符合當前使用者盤面的配置
        for (const board of FauxHollowsFoxes.BOARD_DATA) {
            if (this.boardMatches(board)) {
                matchingBoardsCount++;
                // 統計這個符合盤面中的寶物位置
                for (let row = 0; row < 6; row++) {
                    for (let col = 0; col < 6; col++) {
                        const index = row * 6 + col;
                        const value = board[row][col];
                        if (value === 2) { // 2 代表劍
                            treasureCount.sword[index]++;
                        } else if (value === 3) { // 3 代表寶箱
                            treasureCount.chest[index]++;
                        } else if (value === 4) { // 4 代表可能是宗長或空格（宗長的可能位置）
                            treasureCount.fox[index]++;
                        }
                    }
                }
            }
        }

        // 基於符合的盤面計算機率
        for (let i = 0; i < 36; i++) {
            this.treasureProbabilities.sword[i] = matchingBoardsCount > 0 ? 
                Math.round((treasureCount.sword[i] / matchingBoardsCount) * 100) : 0;
            this.treasureProbabilities.chest[i] = matchingBoardsCount > 0 ? 
                Math.round((treasureCount.chest[i] / matchingBoardsCount) * 100) : 0;
            this.treasureProbabilities.fox[i] = matchingBoardsCount > 0 ? 
                Math.round((treasureCount.fox[i] / matchingBoardsCount) * 100) : 0;
        }
    }

    updateProbabilityDisplay() {
        for (let i = 0; i < 36; i++) {
            const cell = this.elements.board.children[i];
            
            // 先清除所有機率顯示類別
            cell.classList.remove('probability-display', 'treasure-probability-display');
            
            if (this.board[i] === null) {
                // 只在未設置的格子上顯示機率
                cell.textContent = '';
                cell.innerHTML = '';
                
                if (this.showTreasureProbabilities && this.obstaclesConfirmed) {
                    // 顯示寶物機率
                    this.displayTreasureProbabilities(cell, i);
                } else if (this.showProbabilities) {
                    // 顯示障礙物機率
                    if (this.obstacleProbabilities[i] > 0) {
                        cell.textContent = `${this.obstacleProbabilities[i]}%`;
                        cell.classList.add('probability-display');
                    }
                }
            }
            // 如果格子已經被設置（包括empty），則不顯示機率
        }
    }

    displayTreasureProbabilities(cell, index) {
        const swordProb = this.treasureProbabilities.sword[index];
        const chestProb = this.treasureProbabilities.chest[index];
        const foxProb = this.treasureProbabilities.fox[index];
        
        // 收集有機率的項目，並按優先順序排列（劍、寶箱、宗長）
        const allProbabilities = [
            { type: 'sword', text: `劍${swordProb}%`, prob: swordProb, className: 'sword-prob' },
            { type: 'chest', text: `箱${chestProb}%`, prob: chestProb, className: 'chest-prob' },
            { type: 'fox', text: `狐${foxProb}%`, prob: foxProb, className: 'fox-prob' }
        ];
        
        // 只保留有機率的項目（自動往上替補）
        const validProbabilities = allProbabilities.filter(item => item.prob > 0);
        
        if (validProbabilities.length > 0) {
            // 創建三等份結構，只顯示有效的機率
            let itemsHtml = '';
            for (let i = 0; i < 3; i++) {
                if (validProbabilities[i]) {
                    itemsHtml += `<div class="treasure-prob-item ${validProbabilities[i].className}">${validProbabilities[i].text}</div>`;
                } else {
                    itemsHtml += `<div class="treasure-prob-item empty-prob"></div>`;
                }
            }
            
            cell.innerHTML = `<div class="treasure-prob-container">${itemsHtml}</div>`;
            cell.classList.add('treasure-probability-display');
        }
    }

    toggleProbabilities() {
        this.showProbabilities = !this.showProbabilities;
        this.elements.toggleProbabilitiesBtn.textContent = 
            this.showProbabilities ? '隱藏機率' : '顯示機率';
        
        if (this.showProbabilities) {
            this.updateProbabilityDisplay();
        } else {
            // 清除機率顯示
            for (let i = 0; i < 36; i++) {
                const cell = this.elements.board.children[i];
                if (this.board[i] === null) {
                    cell.textContent = '';
                    cell.classList.remove('probability-display');
                }
            }
        }
    }

    updateMatchingBoards() {
        const matchingCount = this.countMatchingBoards();
        this.elements.matchingBoards.textContent = matchingCount;
        
        // 重新計算基於當前符合盤面的障礙物機率
        this.updateObstacleProbabilitiesBasedOnMatches();
        
        // 如果障礙物已確認，也計算寶物機率
        if (this.obstaclesConfirmed) {
            this.updateTreasureProbabilitiesBasedOnMatches();
        }
        
        this.updateProbabilityDisplay();
        
        // 檢查是否可以自動填充障礙物
        this.checkAndAutoFillObstacles();
    }

    countMatchingBoards() {
        let matchingCount = 0;
        
        for (const dbBoard of FauxHollowsFoxes.BOARD_DATA) {
            if (this.boardMatches(dbBoard)) {
                matchingCount++;
            }
        }
        
        return matchingCount;
    }

    boardMatches(dbBoard) {
        // 檢查使用者當前盤面是否與資料庫盤面相符
        if (!dbBoard || dbBoard.length !== 6) return false;
        
        for (let row = 0; row < 6; row++) {
            if (!dbBoard[row] || dbBoard[row].length !== 6) return false;
            
            for (let col = 0; col < 6; col++) {
                const index = row * 6 + col;
                const userValue = this.board[index];
                const dbValue = dbBoard[row][col];
                
                // 只有當使用者已經設置了某個位置時，才檢查是否與資料庫一致
                // null 值表示未設置，應該被視為「未知」，可以匹配任何資料庫值
                if (userValue !== null) {
                    const userMappedValue = this.mapUserValueToDbValue(userValue);
                    
                    // 特殊處理：資料庫中的 4 表示可能是宗長或空格
                    if (dbValue === 4) {
                        // 如果資料庫是 4，使用者可以是 fox(4) 或 empty(0)
                        if (userMappedValue !== 4 && userMappedValue !== 0) {
                            return false;
                        }
                    } else {
                        // 一般情況：必須完全匹配
                        if (userMappedValue !== dbValue) {
                            return false;
                        }
                    }
                }
                // 如果 userValue === null，則跳過此位置的檢查（未知狀態可匹配任何值）
            }
        }
        
        return true;
    }

    mapUserValueToDbValue(userValue) {
        // 將使用者盤面的值映射到資料庫格式
        // 資料庫格式：0=空格, 1=障礙物, 2=劍, 3=寶箱, 4=可能是宗長或空格
        switch (userValue) {
            case 'obstacle': return 1;
            case 'sword': return 2;
            case 'chest': return 3;
            case 'fox': return 4;
            case 'empty': return 0; // 空格在資料庫中是 0
            default: return 0;
        }
    }

    checkAndAutoFillObstacles() {
        // 計算已經放置的障礙物數量
        let obstacleCount = 0;
        for (let i = 0; i < 36; i++) {
            if (this.board[i] === 'obstacle') {
                obstacleCount++;
            }
        }

        // 如果已經有2個或以上的障礙物，檢查是否可以自動填充
        if (obstacleCount >= 2) {
            this.tryAutoFillObstacles();
        }

        // 如果有2個障礙物了，隱藏提示
        if (obstacleCount >= 2 && this.elements.gameHint) {
            this.elements.gameHint.classList.add('hidden');
        }

        // 檢查障礙物是否已確認（自動填充完成後）
        this.checkObstaclesConfirmed();
    }

    checkObstaclesConfirmedWithoutAutoFill() {
        // 與 checkObstaclesConfirmed 相同的邏輯，但不觸發自動填充
        const matchingBoards = [];
        for (const board of FauxHollowsFoxes.BOARD_DATA) {
            if (this.boardMatches(board)) {
                matchingBoards.push(board);
            }
        }

        if (matchingBoards.length === 0) {
            this.obstaclesConfirmed = false;
            return;
        }

        // 檢查障礙物是否已確認
        let obstacleCount = 0;
        for (let i = 0; i < 36; i++) {
            if (this.board[i] === 'obstacle') {
                obstacleCount++;
            }
        }
        
        let allObstaclesConfirmed = false;
        if (obstacleCount === 0) {
            allObstaclesConfirmed = false;
        } else {
            // 檢查每個位置：如果在所有符合盤面中都是障礙物，則必須已被設定為障礙物
            allObstaclesConfirmed = true;
            for (let i = 0; i < 36; i++) {
                const row = Math.floor(i / 6);
                const col = i % 6;
                
                // 檢查這個位置在所有符合盤面中是否都是障礙物
                let allAreObstacles = true;
                for (const board of matchingBoards) {
                    if (board[row][col] !== 1) {
                        allAreObstacles = false;
                        break;
                    }
                }
                
                // 如果這個位置在所有符合盤面中都是障礙物，但使用者還沒設定為障礙物
                if (allAreObstacles && this.board[i] !== 'obstacle') {
                    allObstaclesConfirmed = false;
                    break;
                }
            }
        }

        const wasConfirmed = this.obstaclesConfirmed;
        this.obstaclesConfirmed = allObstaclesConfirmed;

        // 如果障礙物剛確認，啟動寶物機率顯示
        if (!wasConfirmed && this.obstaclesConfirmed) {
            this.showTreasureProbabilities = true;
            this.updateTreasureProbabilitiesBasedOnMatches();
            this.updateProbabilityDisplay(); // 需要更新UI顯示
            FF14Utils.showToast('障礙物位置已確認！現在顯示寶物機率，點擊格子可填寫實際發現的寶物', 'success');
        }
    }

    checkObstaclesConfirmed() {
        // 檢查是否所有障礙物位置都已確定
        const matchingBoards = [];
        for (const board of FauxHollowsFoxes.BOARD_DATA) {
            if (this.boardMatches(board)) {
                matchingBoards.push(board);
            }
        }

        if (matchingBoards.length === 0) {
            this.obstaclesConfirmed = false;
            return;
        }

        // 檢查障礙物是否已確認
        // 條件：至少有一些障礙物已設定，且所有符合盤面中必須為障礙物的位置都已設定
        let obstacleCount = 0;
        for (let i = 0; i < 36; i++) {
            if (this.board[i] === 'obstacle') {
                obstacleCount++;
            }
        }
        
        // 如果沒有任何障礙物，則未確認
        if (obstacleCount === 0) {
            allObstaclesConfirmed = false;
        } else {
            // 檢查每個位置：如果在所有符合盤面中都是障礙物，則必須已被設定為障礙物
            allObstaclesConfirmed = true;
            for (let i = 0; i < 36; i++) {
                const row = Math.floor(i / 6);
                const col = i % 6;
                
                // 檢查這個位置在所有符合盤面中是否都是障礙物
                let allAreObstacles = true;
                for (const board of matchingBoards) {
                    if (board[row][col] !== 1) {
                        allAreObstacles = false;
                        break;
                    }
                }
                
                // 如果這個位置在所有符合盤面中都是障礙物，但使用者還沒設定為障礙物
                if (allAreObstacles && this.board[i] !== 'obstacle') {
                    allObstaclesConfirmed = false;
                    break;
                }
            }
        }

        const wasConfirmed = this.obstaclesConfirmed;
        this.obstaclesConfirmed = allObstaclesConfirmed;

        // 如果障礙物剛確認，啟動寶物機率顯示
        if (!wasConfirmed && this.obstaclesConfirmed) {
            this.showTreasureProbabilities = true;
            this.updateTreasureProbabilitiesBasedOnMatches();
            this.updateProbabilityDisplay(); // 需要更新UI顯示
            FF14Utils.showToast('障礙物位置已確認！現在顯示寶物機率，點擊格子可填寫實際發現的寶物', 'success');
        }
    }

    tryAutoFillObstacles() {
        // 收集所有符合的盤面
        const matchingBoards = [];
        for (const board of FauxHollowsFoxes.BOARD_DATA) {
            if (this.boardMatches(board)) {
                matchingBoards.push(board);
            }
        }

        // 如果沒有符合的盤面，不執行自動填充
        if (matchingBoards.length === 0) return;

        // 檢查所有符合盤面中，每個位置的障礙物是否一致
        const confirmedObstacles = [];
        
        for (let i = 0; i < 36; i++) {
            // 跳過已經設置的格子
            if (this.board[i] !== null) continue;

            const row = Math.floor(i / 6);
            const col = i % 6;
            
            // 檢查這個位置在所有符合盤面中是否都是障礙物
            let allAreObstacles = true;
            let allAreNotObstacles = true;
            
            for (const board of matchingBoards) {
                if (board[row][col] === 1) {
                    allAreNotObstacles = false;
                } else {
                    allAreObstacles = false;
                }
            }

            // 如果所有符合的盤面在這個位置都是障礙物，則自動填充
            if (allAreObstacles) {
                confirmedObstacles.push(i);
            }
        }

        // 自動填充確定的障礙物
        if (confirmedObstacles.length > 0) {
            let fillCount = 0;
            for (const index of confirmedObstacles) {
                this.setObstacle(index);
                fillCount++;
            }
            
            // 顯示自動填充的提示
            FF14Utils.showToast(`已自動填充 ${fillCount} 個確定的障礙物位置`, 'success');
            
            // 更新顯示（但不觸發 updateMatchingBoards 避免遞迴）
            this.updateDisplay();
            this.checkForCompletedShapes();
            this.validateShapes();
            
            // 手動更新符合盤面計數，但不觸發自動填充
            const matchingCount = this.countMatchingBoards();
            this.elements.matchingBoards.textContent = matchingCount;
            this.updateObstacleProbabilitiesBasedOnMatches();
            
            // 檢查障礙物是否已確認（但不重複調用自動填充）
            this.checkObstaclesConfirmedWithoutAutoFill();
            
            this.updateProbabilityDisplay();
        }
    }

    onCellClick(cell) {
        const index = parseInt(cell.dataset.index);
        
        // If cell is already clicked (gray) or occupied, do nothing
        if (cell.classList.contains('clicked') || cell.classList.contains('occupied')) {
            return;
        }

        // In treasure phase (obstacles confirmed), show popup for treasure selection
        if (this.obstaclesConfirmed) {
            // Allow clicking on: null cells, treasure probability display, or existing treasure cells
            const canClick = this.board[index] === null || 
                           cell.classList.contains('treasure-probability-display') ||
                           ['sword', 'chest', 'fox', 'empty'].includes(this.board[index]);
            
            if (canClick) {
                this.selectedCell = index;
                this.showPopup();
            }
        } else {
            // In obstacle phase, directly place/remove obstacles
            if (this.board[index] === null || cell.classList.contains('treasure-probability-display')) {
                // Place obstacle on empty cell
                this.setObstacle(index);
            } else if (this.board[index] === 'obstacle') {
                // Remove obstacle if clicking on existing obstacle
                this.clearCell(index);
            } else {
                // Cell is occupied by something else, do nothing
                return;
            }
            
            this.updateDisplay();
            this.checkForCompletedShapes();
            this.validateShapes();
            
            // 更新符合盤面計數並觸發自動填充
            const matchingCount = this.countMatchingBoards();
            this.elements.matchingBoards.textContent = matchingCount;
            this.updateObstacleProbabilitiesBasedOnMatches();
            
            // 嘗試自動填充障礙物
            this.tryAutoFillObstacles();
            
            // 檢查障礙物是否已確認
            this.checkObstaclesConfirmed();
            
            this.updateProbabilityDisplay();
        }
    }

    showPopup() {
        // 根據遊戲階段顯示不同的選項
        this.updatePopupOptions();
        this.elements.popup.style.display = 'flex';
    }

    updatePopupOptions() {
        const popupBtns = this.elements.popup.querySelectorAll('.popup-btn');
        
        if (this.obstaclesConfirmed) {
            // 填寶物階段：顯示劍、寶箱、宗長、空格、清除
            popupBtns.forEach(btn => {
                const type = btn.dataset.type;
                if (type === 'sword' || type === 'chest' || type === 'fox' || type === 'empty' || type === 'clear') {
                    btn.style.display = 'flex';
                } else {
                    btn.style.display = 'none';
                }
            });
        } else {
            // 填障礙物階段：只顯示障礙物、清除
            popupBtns.forEach(btn => {
                const type = btn.dataset.type;
                if (type === 'obstacle' || type === 'clear') {
                    btn.style.display = 'flex';
                } else {
                    btn.style.display = 'none';
                }
            });
        }
    }

    closePopup() {
        this.elements.popup.style.display = 'none';
        this.selectedCell = null;
    }

    handlePopupSelection(type) {
        if (this.selectedCell === null) return;

        const cell = this.elements.board.children[this.selectedCell];

        if (type === 'clear') {
            this.clearCell(this.selectedCell);
        } else if (type === 'obstacle') {
            this.setObstacle(this.selectedCell);
        } else if (type === 'empty') {
            // Check if we can place empty
            if (this.clickCount >= FauxHollowsFoxes.CONSTANTS.MAX_CLICKS) {
                FF14Utils.showToast('已達到最大點擊次數！', 'error');
                this.closePopup();
                return;
            }
            this.placeEmpty(this.selectedCell);
        } else {
            // Check if we can place the shape
            if (this.clickCount >= FauxHollowsFoxes.CONSTANTS.MAX_CLICKS) {
                FF14Utils.showToast('已達到最大點擊次數！', 'error');
                this.closePopup();
                return;
            }

            // Check shape limits before placing
            if (!this.checkShapeLimits(type)) {
                this.closePopup();
                return;
            }

            // Place single cell
            this.placeSingleCell(this.selectedCell, type);
        }

        this.closePopup();
        this.updateDisplay();
        this.checkForCompletedShapes();
        this.validateShapes();
        this.updateMatchingBoards();
    }

    setObstacle(index) {
        const cell = this.elements.board.children[index];
        
        // Set as obstacle directly without clearing first
        this.board[index] = 'obstacle';
        cell.className = 'board-cell obstacle';
        cell.textContent = '✕';
    }

    clearCell(index) {
        const cell = this.elements.board.children[index];
        
        // Don't allow clearing if it's a gray cell from game completion
        if (this.clickCount >= FauxHollowsFoxes.CONSTANTS.MAX_CLICKS && this.board[index] === null) {
            return;
        }
        
        // Clear the cell
        this.board[index] = null;
        cell.className = 'board-cell';
        cell.textContent = '';
        
        // Restore probability display if enabled
        if (this.showProbabilities && this.obstacleProbabilities[index] > 0) {
            cell.textContent = `${this.obstacleProbabilities[index]}%`;
            cell.classList.add('probability-display');
        }
        
        // Recalculate everything
        this.recalculateState();
    }

    placeSingleCell(index, type) {
        const cell = this.elements.board.children[index];
        
        // In treasure phase (obstacles confirmed), allow overwriting treasure cells
        if (this.obstaclesConfirmed) {
            // Allow placing on: null cells, treasure probability display, or existing treasure cells
            const canPlace = this.board[index] === null || 
                           cell.classList.contains('treasure-probability-display') ||
                           ['sword', 'chest', 'fox', 'empty'].includes(this.board[index]);
            
            if (!canPlace) {
                FF14Utils.showToast('此格子無法修改！', 'error');
                return;
            }
        } else {
            // In obstacle phase, only allow placing on null cells or treasure probability display
            if (this.board[index] !== null && !cell.classList.contains('treasure-probability-display')) {
                FF14Utils.showToast('此格子已被佔用！', 'error');
                return;
            }
        }

        // If overwriting an existing treasure cell, don't increment click count
        const isOverwriting = this.obstaclesConfirmed && 
                             ['sword', 'chest', 'fox', 'empty'].includes(this.board[index]);

        // Place the single cell
        this.board[index] = type;
        cell.className = `board-cell ${type}`;
        cell.innerHTML = '';
        
        // Set display text
        if (type === 'fox') {
            cell.textContent = '狐';
        } else if (type === 'sword') {
            cell.textContent = '劍';
        } else if (type === 'chest') {
            cell.textContent = '箱';
        }
        
        // Only increment click count if not overwriting
        if (!isOverwriting) {
            this.clickCount++;
        }
    }

    placeEmpty(index) {
        const cell = this.elements.board.children[index];
        
        // In treasure phase (obstacles confirmed), allow overwriting treasure cells
        if (this.obstaclesConfirmed) {
            // Allow placing on: null cells, treasure probability display, or existing treasure cells
            const canPlace = this.board[index] === null || 
                           cell.classList.contains('treasure-probability-display') ||
                           ['sword', 'chest', 'fox', 'empty'].includes(this.board[index]);
            
            if (!canPlace) {
                FF14Utils.showToast('此格子無法修改！', 'error');
                return;
            }
        } else {
            // In obstacle phase, only allow placing on null cells or treasure probability display
            if (this.board[index] !== null && !cell.classList.contains('treasure-probability-display')) {
                FF14Utils.showToast('此格子已被佔用！', 'error');
                return;
            }
        }

        // If overwriting an existing treasure cell, don't increment click count
        const isOverwriting = this.obstaclesConfirmed && 
                             ['sword', 'chest', 'fox', 'empty'].includes(this.board[index]);

        this.board[index] = 'empty';
        cell.className = 'board-cell empty';
        cell.innerHTML = '';
        cell.textContent = '';
        
        // Only increment click count if not overwriting
        if (!isOverwriting) {
            this.clickCount++;
        }
    }

    checkShapeLimits(type) {
        // Count existing cells of this type
        let count = 0;
        for (let i = 0; i < 36; i++) {
            if (this.board[i] === type) {
                count++;
            }
        }

        if (type === 'fox' && count >= 1) {
            FF14Utils.showToast('宗長只能放置 1 格！', 'error');
            return false;
        } else if (type === 'sword' && count >= 6) {
            FF14Utils.showToast('劍最多只能放置 6 格！', 'error');
            return false;
        } else if (type === 'chest' && count >= 4) {
            FF14Utils.showToast('寶箱最多只能放置 4 格！', 'error');
            return false;
        }

        return true;
    }


    checkForCompletedShapes() {
        // Reset score
        this.score = 0;
        
        // Track processed cells to avoid double counting
        const processed = new Set();
        
        // Check for foxes (1x1)
        for (let i = 0; i < 36; i++) {
            if (this.board[i] === 'fox' && !processed.has(i)) {
                processed.add(i);
                this.score += FauxHollowsFoxes.CONSTANTS.SCORES.FOX;
            }
        }
        
        // Check for chests (2x2)
        for (let row = 0; row < 5; row++) {
            for (let col = 0; col < 5; col++) {
                if (this.checkShapePattern(row, col, 2, 2, 'chest', processed)) {
                    this.score += FauxHollowsFoxes.CONSTANTS.SCORES.CHEST;
                }
            }
        }
        
        // Check for swords (2x3 or 3x2)
        // Check 2x3
        for (let row = 0; row < 4; row++) {
            for (let col = 0; col < 5; col++) {
                if (this.checkShapePattern(row, col, 2, 3, 'sword', processed)) {
                    this.score += FauxHollowsFoxes.CONSTANTS.SCORES.SWORD;
                }
            }
        }
        
        // Check 3x2
        for (let row = 0; row < 5; row++) {
            for (let col = 0; col < 4; col++) {
                if (this.checkShapePattern(row, col, 3, 2, 'sword', processed)) {
                    this.score += FauxHollowsFoxes.CONSTANTS.SCORES.SWORD;
                }
            }
        }
        
        // Only mark surrounding cells as gray when game is complete
        if (this.clickCount >= FauxHollowsFoxes.CONSTANTS.MAX_CLICKS) {
            this.markGrayCells();
        }
        
        this.updateDisplay();
    }

    validateShapes() {
        // Count cells of each type
        const counts = {
            fox: 0,
            sword: 0,
            chest: 0
        };

        for (let i = 0; i < 36; i++) {
            if (this.board[i] === 'fox') counts.fox++;
            else if (this.board[i] === 'sword') counts.sword++;
            else if (this.board[i] === 'chest') counts.chest++;
        }

        // Check fox limit
        if (counts.fox > 1) {
            FF14Utils.showToast('錯誤：宗長只能有 0 或 1 格！', 'error');
            return false;
        }

        // Check sword
        if (counts.sword > 6) {
            FF14Utils.showToast('錯誤：劍最多只能有 6 格！', 'error');
            return false;
        } else if (counts.sword === 6) {
            // Check if it forms a valid 2x3 or 3x2 shape
            let validShape = false;
            const processed = new Set();
            
            // Check 2x3
            for (let row = 0; row < 4; row++) {
                for (let col = 0; col < 5; col++) {
                    if (this.checkShapePattern(row, col, 2, 3, 'sword', processed)) {
                        validShape = true;
                        break;
                    }
                }
                if (validShape) break;
            }
            
            // Check 3x2
            if (!validShape) {
                processed.clear();
                for (let row = 0; row < 5; row++) {
                    for (let col = 0; col < 4; col++) {
                        if (this.checkShapePattern(row, col, 3, 2, 'sword', processed)) {
                            validShape = true;
                            break;
                        }
                    }
                    if (validShape) break;
                }
            }

            if (!validShape && processed.size === 6) {
                FF14Utils.showToast('錯誤：6 格劍必須形成 2x3 或 3x2 的形狀！', 'error');
                return false;
            }
        }

        // Check chest
        if (counts.chest > 4) {
            FF14Utils.showToast('錯誤：寶箱最多只能有 4 格！', 'error');
            return false;
        } else if (counts.chest === 4) {
            // Check if it forms a valid 2x2 shape
            let validShape = false;
            const processed = new Set();
            
            for (let row = 0; row < 5; row++) {
                for (let col = 0; col < 5; col++) {
                    if (this.checkShapePattern(row, col, 2, 2, 'chest', processed)) {
                        validShape = true;
                        break;
                    }
                }
                if (validShape) break;
            }

            if (!validShape) {
                FF14Utils.showToast('錯誤：4 格寶箱必須形成 2x2 的形狀！', 'error');
                return false;
            }
        }

        return true;
    }
    
    checkShapePattern(row, col, width, height, type, processed) {
        // Check if all cells in the pattern match the type
        const cells = [];
        
        for (let r = row; r < row + height; r++) {
            for (let c = col; c < col + width; c++) {
                const index = r * 6 + c;
                if (this.board[index] !== type || processed.has(index)) {
                    return false;
                }
                cells.push(index);
            }
        }
        
        // Mark all cells as processed
        cells.forEach(index => processed.add(index));
        return true;
    }

    
    markGrayCells() {
        // Mark all remaining empty cells as gray when game is complete
        for (let i = 0; i < 36; i++) {
            if (this.board[i] === null) {
                const cell = this.elements.board.children[i];
                cell.className = 'board-cell clicked';
            }
        }
    }


    recalculateState() {
        // Reset click count
        this.clickCount = 0;

        // Count all non-obstacle, non-null cells
        for (let i = 0; i < 36; i++) {
            const value = this.board[i];
            if (value && value !== 'obstacle') {
                this.clickCount++;
            }
        }

        // Recalculate shapes and score
        this.checkForCompletedShapes();
        this.validateShapes();
        this.updateMatchingBoards();
    }

    updateDisplay() {
        this.elements.remainingClicks.textContent = FauxHollowsFoxes.CONSTANTS.MAX_CLICKS - this.clickCount;
        this.elements.currentScore.textContent = this.score;

        // Check if game is complete
        if (this.clickCount >= FauxHollowsFoxes.CONSTANTS.MAX_CLICKS) {
            this.showResult();
        }
    }

    showResult() {
        this.elements.finalScore.textContent = this.score;
        
        // Calculate shape counts
        const shapes = { sword: 0, chest: 0, fox: 0 };
        const counted = new Set();
        
        for (let i = 0; i < 36; i++) {
            const value = this.board[i];
            if (value && !counted.has(value) && value !== 'obstacle' && value !== 'clicked') {
                counted.add(value);
                if (value === 'fox') shapes.fox++;
                else if (value.startsWith('sword')) shapes.sword++;
                else if (value.startsWith('chest')) shapes.chest++;
            }
        }

        this.elements.resultDetails.innerHTML = `
            <p>劍 x ${shapes.sword} = ${shapes.sword * FauxHollowsFoxes.CONSTANTS.SCORES.SWORD} 分</p>
            <p>寶箱 x ${shapes.chest} = ${shapes.chest * FauxHollowsFoxes.CONSTANTS.SCORES.CHEST} 分</p>
            <p>宗長 x ${shapes.fox} = ${shapes.fox * FauxHollowsFoxes.CONSTANTS.SCORES.FOX} 分</p>
        `;

        this.elements.resultPanel.style.display = 'block';
    }


    autoCalculate() {
        FF14Utils.showToast('自動計算功能開發中...', 'info');
    }

    reset() {
        // Clear board
        this.board = Array(36).fill(null);
        this.clickCount = 0;
        this.score = 0;
        this.selectedCell = null;
        this.obstacleProbabilities = Array(36).fill(0);
        this.treasureProbabilities = {
            sword: Array(36).fill(0),
            chest: Array(36).fill(0),
            fox: Array(36).fill(0)
        };
        this.obstaclesConfirmed = false;
        this.showTreasureProbabilities = false;
        
        // Reset UI
        this.initializeBoard();
        this.updateDisplay();
        this.elements.resultPanel.style.display = 'none';
        
        // Restore probability display if enabled
        this.updateProbabilityDisplay();
        this.updateMatchingBoards();
        
        // 顯示提示
        if (this.elements.gameHint) {
            this.elements.gameHint.classList.remove('hidden');
        }
    }
}

// Initialize the game when page loads
let game;
document.addEventListener('DOMContentLoaded', () => {
    game = new FauxHollowsFoxes();
});
